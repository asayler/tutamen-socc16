===========================================================================
                        USENIX ATC '16 Review #283A
---------------------------------------------------------------------------
      Paper #283: Tutamen: A Next Generation Secret Storage Platform
---------------------------------------------------------------------------

                      Overall merit: 2. Weak reject
                 Reviewer expertise: 3. Knowledgeable

                         ===== Paper summary =====

This paper presents a distributed secret manager.

                           ===== Strengths =====

1) The system takes into account many practical issues.
2) The system has been applied to cool scenarios.

                          ===== Weaknesses =====

1) There isn't anything really new here.
2) Some important things like key change and certificate revocation
are missing.

                      ===== Comments for author =====

Overall I think the solution proposed is interesting. I think it would
be best presented as an experience paper. Of course to do that I think
you need some more experience.

I did find a few problems with the paper itself that could help
improve readability. I found section 2 contained too much tangential
information. For example, Permissions are touched on, but aren't
really talked about. I think it would help to simplify the description
of the components to only what you are focusing on in the paper, which
needs to be authorization done by the ACS and storage done by the SS.

There is some things missing here that are important: it seems like
the ACS is a relatively stable component of the system, how are SS
added and removed? Can you do migration to decommission a server? How
are client certificates revoked? You introduced the notion of an
account and a client. Diagrams of relationships of accounts, clients,
and certificates would be useful as well as a diagram of how things
are setup/revoked.

The evaluation leaves a lot to be desired. Not only is it running in a
VM it's run on old hardware. The performance is also very low. An
obvious application is a web browser password manager and the
performance isn't high enough to support many users.

I did really like the example applications. The hands free booting
using sms verification is very compelling.

I can see good reasons to accept the paper, but in my opinion it's
best accepted as an experience paper and it just doesn't have enough
experience behind it.

===========================================================================
                        USENIX ATC '16 Review #283B
---------------------------------------------------------------------------
      Paper #283: Tutamen: A Next Generation Secret Storage Platform
---------------------------------------------------------------------------

                      Overall merit: 4. Accept
                 Reviewer expertise: 3. Knowledgeable

                         ===== Paper summary =====


This paper describes Tutamen, a storage platform that can store
information safely.

                           ===== Strengths =====


* Relevant problem in a world where more and more data is being stored
  in the cloud - on unsecure cloud providers.
* Well thought out and thorough.
* Well written.

                          ===== Weaknesses =====


* Performance doesn't seem high enough. For widescale adoption, this
  needs to be fixed.
* The onus of using the distributed nature of the servers shouldn't be
  left to the application.
* Tutamen needs to support incremental addition of its various
  components so that it can scale when applications are added. This is
  not covered in the paper.

                      ===== Comments for author =====


This paper addresses an important problem. The solution is well
thought out as I've already mentioned. However, I find that the paper
has the following gaps, which the authors are encouraged to fix:

* The performance is too low from Section 5. The authors shouldn't
  consider the architecture from the perspective of something like
  dropbox and not just a toy application. It needs to be scaleable so
  that it can be used by millions of users. A performance of around
  100 rps isn't going to cut it. The authors should consider a bigger
  deployment on AWS and show scalability in performance.

* Rather than layering it on dropbox and forcing users to exchange
  encryption keys through Tutamen, the authors are encouraged to build
  the equivalent of dropbox that incorporates Tutamen transparently.

* Tutamen needs to support incremental scaleout. That is, grow Tutamen
  non-disruptively one component at a time as the application load
  increases.

===========================================================================
                        USENIX ATC '16 Review #283C
---------------------------------------------------------------------------
      Paper #283: Tutamen: A Next Generation Secret Storage Platform
---------------------------------------------------------------------------

                      Overall merit: 1. Reject
                 Reviewer expertise: 3. Knowledgeable

                         ===== Paper summary =====

The paper describes a system that can securely store secrets, such as
encryption keys.  Secrets are sharded, and the shards are stored on
multiple servers, so that the secret remains protected even if some of
the servers are compromised. Authentication can be done in several
ways - not only with a password, but also, for instance, via SMS - and
it can involve multiple servers as well.

                          ===== Weaknesses =====

- Paper mostly describes an artifact
- Few insights or lessons learned

                      ===== Comments for author =====

Securely storing secrets is an important problem, and a number of
innovative approaches have recently been suggested, including, e.g.,
CleanOS (OSDI'12) and TinMan (EuroSys'15).

However, I am not sure I understand the contribution in this
particular paper. The proposed design contains a mix of techniques
I've seen before (including, e.g., a token mechanism that is
reminiscent of Kerberos, ideas from multi-factor authentication, and
sharding), and the paper itself makes no effort to highlight the
novelty or the key insights to the reader; it focuses mostly on
describing the details of the software artifact that has been
built. There isn't even so much as a Related Work section, even though
there clearly is quite a bit of related work - including a TRIOS paper
by two of the authors, which is only mentioned in passing. I think the
paper would be a lot stronger if it was more explicit about what the
novel insights and contributions are.

===========================================================================
                        USENIX ATC '16 Review #283D
---------------------------------------------------------------------------
      Paper #283: Tutamen: A Next Generation Secret Storage Platform
---------------------------------------------------------------------------

                      Overall merit: 1. Reject
                 Reviewer expertise: 2. Some familiarity

                         ===== Paper summary =====

This paper presents a system for reliably storing secrets on cloud
systems and later retrieving them.  The system is innovative in that
it allows both the secrets and control of their access to be sharded
across multiple servers in a *k*-out-of-*n* fashion to reduce the risk
of compromise.  In essence, the system depends on a set of
authorization servers and a separate set of secret-storage servers; a
client first receives authorization and then requests the appropriate
secret.  The authors have built a prototype system and briefly
measured it.

                           ===== Strengths =====

There is a real need for such a system, and the authors have built
it.  The paper is highly readable.

                          ===== Weaknesses =====

Although the paper is readable, it omits a number of critical
details.  In particular, most of the important aspects of the proposed
protocol are missing,

                      ===== Comments for author =====

This paper was a pleasure to read; the writing is clear and
grammatical.  It also addresses a real need and presents several
plausible scenarios where it would be useful (I would happily deploy
it tomorrow, if I had the time to do so).

The paper suffers from a pervasive and critical misuse of hyphens,
beginning with the title.  A "secret storage platform" is a storage
system that is hidden from view; what the authors are describing is a
"secret-storage platform", i.e. a way to store secrets.  Compare
"acting-department chair" (a drama teacher) with "acting department
chair" (a temporary job).  The same is true of several other common
phrases, notably 'access\[-\]control server."  But not that you can't
just globally replace "secret storage" with "secret-storage"; the
hyphen should appear only when the phrase is used as a modifier
(compare "the chair of the acting-department", which is just silly).
An example of a place where hyphens would be incorrect is the last
sentence of 1.1: "...the importance of secret storage, and..."  I
recommend reference to the appropriate sections of the Chicago Manual
of Style for a more thorough discussion.

That's an easily corrected mistake, though.  A much bigger problem is
that the paper is vague on the details.  For example, the authors make
it clear that at least two servers are required: one to mediate access
control, and another to actually store the secrets.  But they never
explain _why_ two are needed.  What would go wrong if both functions
were placed on the same machine?  The reader is left to guess.
Similarly, the handshake shown in Figure 5 (which, BTW, uses
unreadably small fonts) takes a five round trips to store a new
secret; there is no explanation of what these five steps are nor why
they need to be separate.  The overall message is "trust us, it
works".  That's not at all appropriate for a security paper; there
should be a thorough explanation combined with a careful argument for
why the system can't be compromised.

Speaking of compromises, there is a glaring error in Section 3.2: the
authors claim that $n-k+1$ servers must be compromised before there is
a security failure.  This is obviously incorrect; in fact $k$
compromises are sufficient.  For example, if $n=10$ and $k=3$, any
three servers can reconstruct the secret and thus an attacker
necessarily only needs to break into three to succeed.  The place
where $n-k$ comes in is robustness: $n-k+1$ servers must fail before
the secret becomes irretrievable.

Overall, I'd love to see this material published.  But I think that in
its present form too much critical information is missing, and I'm not
willing to recommend acceptance based on a hope that the missing
information will be added.

Other comments:

   - Figure 2 uses many undefined abbreviations; these need to be
     defined in the caption.

   - The top of page 6 refers to "a novel ($k,n$) threshold scheme."
     I'd say "novel yet simple", because simplicity is one of its
     hallmarks.

   - Footnote 2 ends by claiming that the ID-grabbing DOS attack isn't
     worth worrying about.  Those sound like famous last words.  In
     any case, why can't an application just request a different ID?
     The entire process of generating IDs is inadequately specified.

   - Section 3.3 argues that service providers who do a bad job of
     being secure "will suffer a negative economic effect,
     disincentivizing such behavior."  This is the type of wishful
     thinking that is popular with economists; it's not a valid
     security argument.  There are plenty of counterexamples in the
     real world, and in any case the argument rests on the assumption
     of a fully informed client base.  The paper would do better to
     simply omit that paragraph and instead admit that Tutamen still
     has risks, but that (a) it is better than current alternatives
     and (b) sharding secrets sufficiently widely can arbitrarily
     reduce risk.

   - Figure 8 is insufficiently explained.  In the first place, the
     chosen axes are a bit odd, although I guess the X axis is
     intended to represent applied load.  But why does the latency
     initially drop as the load rises?  Why do the curves all stop at
     different points?  (Was the next point off the charts?  Were the
     tests arbitrarily stopped at that point?  Or did the authors
     simply decide that the following point was on the graph but
     unacceptable?)

   - The experimental evaluation is sketchy at best, and vaguely
     described.  What is the "2011-era" machine?  What is its clock
     rate?  How much memory does the host have?  How fast is its
     network connection?  How many experimental runs were done?  (The
     standard deviations in Figure 8 are meaningless without knowing
     the run count; in any case it would be better to give confidence
     intervals.)

   - The authors consistently use an en dash, separated by spaces, to
     set off parenthetical comments (except in one place where they
     use a hyphen).  Correct typography calls for an em dash with no
     spaces; see Lamport p. 14.  Also, in at least two places the
     parenthetical begins with an en dash but is terminated by a
     comma, which is also correct.  In other words, you should write
     parentheticals--also known as asides--like this, rather than
     writing them--incorrectly, like this.

   - Don't utilize "utilize"; use "use". :-)  The former is
     unnecessarily verbose.  Similarly, globally replace "in order to"
     with simply "to" (there are a couple of places where the longer
     version helps readability, but 95% should disappear).  Replace
     "as well as" with "and" (especially in the construction
     "both...as well as", which is just bad English).

   - Typographic errors that won't be caught by a spell-checker:
     "secrete", "cable" for "capable", "sever" for "server" and
     "serves" for "servers", "discreet" for "discrete", "adopted" for
     "adapted".  There's also an occurrence of "become efficient" that
     should be "becomes".

   - "/" is not an English word; use "and" or "or" as appropriate.

   - At the beginning of Section 2.1 is the phrase "...for
     authenticating secret requests".  That would normally be read as
     "authenticating requests that are kept secret".  Rephrasing to
     "authenticating requests for secrets" would be clearer.

   - "Cert" isn't a word, nor is "syncing", nor is "10s", nor is
     "crypto".  Don't be lazy in a formal paper.

   - Although I'm not rabidly against contractions, I found "we've" to
     be a bit jarring in a formal context.  I'd suggest "we have".

   - Despite its popularity with lawyers, "and/or" isn't a word and
     isn't necessary; the English word "or" is inclusive.  (XOR is
     indicated by "either...or".)

   - "Python" is a proper noun; the paper sometimes capitalizes it and
     sometimes doesn't.  Consistency is needed.

   - Page 6, column 2, the second paragraph contains a lengthy
     unparseable sentence: "The Tutamen authenticator interface..."  A
     rewrite would be most helpful to the reader.

   - "human-at-keyboard" => "human-at-the-keyboard".

   - Surely there's a better title for Section 4.3 than "Other".

   - Figure 7 requires color to be interpreted.  The CFP explicitly
     requires figures to be legible in monochrome.

   - I would argue that human-scale times (bottom of p. 10) are hours,
     not seconds.  A human might be asleep when a text message comes
     in.

   - The bibliography has many errors.  Start with Lamport, Appendix
     B, for instruction on how to properly use curly braces in
     titles.  Citations 9 and 11, for example, are overcapitalized,
     while 15 sets JSON in lower case.  Citation 2 uses a hyphen where
     the original used an en dash.  Citation 28 has random
     capitalization in the conference title (it should be in "title
     case").  Citation 40 has a stray blank before a comma, and 41 is
     missing an apostrophe.  In general, bibliographies need
     proofreading just as much as the rest of the paper.
